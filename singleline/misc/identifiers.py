# Utilities that control the generation of identifiers.

import ast
from typing import Set


def get_params(node: ast.FunctionDef) -> Set[str]:
    """
    Obtains the parameters of a function as a set of strings. This include the
    names assigned to `*args` and `**kwargs`.
    """
    all_args = node.args.args + node.args.kwonlyargs

    if hasattr(node.args, 'posonlyargs'):
        all_args += node.args.posonlyargs

    if node.args.vararg is not None:
        all_args.append(node.args.vararg)

    if node.args.kwarg is not None:
        all_args.append(node.args.kwarg)

    return {i.arg for i in all_args}


def _to_excel_name(num: int) -> str:
    name = ''
    while num:
        num, rem = divmod(num - 1, 26)
        name += chr(65 + rem)

    return name[:: -1]


class IdentifierGenerator:

    counter: int
    prepend: bool
    invalid_pool: Set[str]

    def __init__(self, invalid_pool: Set[str], prepend: bool = True):
        """
        invalid_pool: a reference to the (currently visited) set of identifier
        names that are used.
        prepend: whether to prepend an underscore to all generated names.
        """
        self.invalid_pool = invalid_pool
        self.prepend = prepend
        self.counter = 1

    def throwaway(self):
        """
        Generate a throwaway identifier for a variable whose liveness will
        never interfere with another variable generated by `throwaway()`.
        """

        return '_'
    
    def add_used(self, name):
        self.invalid_pool.add(name)
    
    def get_name(self, ctx):
        # TODO: respect name generation context for meaningful names
        name = _to_excel_name(self.counter)
        while name in self.invalid_pool:
            self.counter += 1
            name = _to_excel_name(self.counter)
        
        self.counter += 1
        final_name = '_' + name

        self.invalid_pool.add(final_name)
        return final_name
